{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/property.service\";\nimport * as i2 from \"@angular/router\";\nexport class PropertyFormComponent {\n  ngOnInit() {\n    this.cargar();\n  }\n  constructor(propertyService, activatedRoute) {\n    this.propertyService = propertyService;\n    this.activatedRoute = activatedRoute;\n    this.property = {\n      idProperty: 0,\n      propertyType: \"\",\n      streetAddress: \"\",\n      city: \"\",\n      stateProvince: \"\",\n      zipCode: \"\",\n      price: 0,\n      numBedrooms: 0,\n      numBathrooms: 0,\n      landMeters: 0,\n      constructionMeters: 0,\n      photo: \"\",\n      garageSize: 0,\n      sisternSize: 0,\n      bonus: \"\"\n    };\n    this.selectedId = '';\n  }\n  cargar() {\n    this.activatedRoute.params.subscribe(e => {\n      let id = e['idProperty'];\n      if (id) {\n        this.propertyService.get(id).subscribe(es => this.property = es, this.selectedId = id);\n      }\n    });\n  }\n  update() {\n    this.propertyService.update(this.selectedId, this.property).subscribe(res => {\n      console.log(res);\n    }, err => console.error(err));\n  }\n  saveNewProperty() {\n    delete this.property.idProperty;\n    this.propertyService.save(this.property).subscribe(res => {\n      console.log(res);\n    }, err => console.error(err));\n  }\n}\nPropertyFormComponent.ɵfac = function PropertyFormComponent_Factory(t) {\n  return new (t || PropertyFormComponent)(i0.ɵɵdirectiveInject(i1.PropertyService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nPropertyFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PropertyFormComponent,\n  selectors: [[\"app-property-form\"]],\n  decls: 2,\n  vars: 0,\n  template: function PropertyFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"property-form works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,qBAAqB;EAqBhCC,QAAQ;IACN,IAAI,CAACC,MAAM,EAAE;EACf;EACAC,YAAoBC,eAAgC,EAAUC,cAA6B;IAAvE,oBAAe,GAAfD,eAAe;IAA2B,mBAAc,GAAdC,cAAc;IAvB5E,aAAQ,GAAa;MACnBC,UAAU,EAAE,CAAC;MACbC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,EAAE;MACjBC,IAAI,EAAE,EAAE;MACRC,aAAa,EAAE,EAAE;MACjBC,OAAO,EAAC,EAAE;MACVC,KAAK,EAAE,CAAC;MACRC,WAAW,EAAE,CAAC;MACdC,YAAY,EAAE,CAAC;MACfC,UAAU,EAAE,CAAC;MACbC,kBAAkB,EAAE,CAAC;MACrBC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,CAAC;MACbC,WAAW,EAAE,CAAC;MACdC,KAAK,EAAE;KACR;IAED,eAAU,GAAW,EAAE;EAOvB;EAGAlB,MAAM;IACJ,IAAI,CAACG,cAAc,CAACgB,MAAM,CAACC,SAAS,CAClCC,CAAC,IAAE;MACD,IAAIC,EAAE,GAAGD,CAAC,CAAC,YAAY,CAAC;MACxB,IAAGC,EAAE,EAAC;QACJ,IAAI,CAACpB,eAAe,CAACqB,GAAG,CAACD,EAAE,CAAC,CAACF,SAAS,CACpCI,EAAE,IAAE,IAAI,CAACC,QAAQ,GAACD,EAAE,EACpB,IAAI,CAACE,UAAU,GAAGJ,EAAE,CACrB;;IAEL,CAAC,CACF;EACH;EAEAK,MAAM;IACJ,IAAI,CAACzB,eAAe,CAACyB,MAAM,CAAC,IAAI,CAACD,UAAU,EAAC,IAAI,CAACD,QAAQ,CAAC,CAACL,SAAS,CAClEQ,GAAG,IAAG;MAAEC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAAA,CAAC,EACzBG,GAAG,IAAIF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC,CAC1B;EACH;EAEAE,eAAe;IACb,OAAO,IAAI,CAACR,QAAQ,CAACrB,UAAU;IAE/B,IAAI,CAACF,eAAe,CAACgC,IAAI,CAAC,IAAI,CAACT,QAAQ,CAAC,CAACL,SAAS,CAChDQ,GAAG,IAAG;MAACC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAAA,CAAC,EACxBG,GAAG,IAAIF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC,CAC1B;EACH;;AAzDWjC,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAqC;EAAAC;EAAAC;EAAAC;IAAA;MCVlCC,yBAAG;MAAAA,oCAAoB;MAAAA,iBAAI","names":["PropertyFormComponent","ngOnInit","cargar","constructor","propertyService","activatedRoute","idProperty","propertyType","streetAddress","city","stateProvince","zipCode","price","numBedrooms","numBathrooms","landMeters","constructionMeters","photo","garageSize","sisternSize","bonus","params","subscribe","e","id","get","es","property","selectedId","update","res","console","log","err","error","saveNewProperty","save","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["D:\\Proyectos Angular\\SistemaCasas\\client\\src\\app\\components\\property-form\\property-form.component.ts","D:\\Proyectos Angular\\SistemaCasas\\client\\src\\app\\components\\property-form\\property-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Property } from 'src/app/models/Property';\nimport { PropertyService } from 'src/app/services/property.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-property-form',\n  templateUrl: './property-form.component.html',\n  styleUrls: ['./property-form.component.css']\n})\nexport class PropertyFormComponent implements OnInit{\n  property: Property = {\n    idProperty: 0,\n    propertyType: \"\",\n    streetAddress: \"\",\n    city: \"\",\n    stateProvince: \"\",\n    zipCode:\"\",\n    price: 0,\n    numBedrooms: 0,\n    numBathrooms: 0, \n    landMeters: 0,\n    constructionMeters: 0,\n    photo: \"\",\n    garageSize: 0,\n    sisternSize: 0,\n    bonus: \"\"\n  }\n  \n  selectedId: string = '';\n\n  ngOnInit(): void {\n    this.cargar();\n  }\n  constructor(private propertyService: PropertyService, private activatedRoute:ActivatedRoute){\n\n  }\n\n\n  cargar():void{\n    this.activatedRoute.params.subscribe(\n      e=>{\n        let id = e['idProperty'];\n        if(id){\n          this.propertyService.get(id).subscribe(\n            es=>this.property=es,\n            this.selectedId = id\n          );\n        }\n      }\n    )\n  }\n\n  update():void{\n    this.propertyService.update(this.selectedId,this.property).subscribe(\n      res => {console.log(res)},\n      err => console.error(err)\n    );\n  }\n\n  saveNewProperty(){\n    delete this.property.idProperty;\n    \n    this.propertyService.save(this.property).subscribe(\n      res =>{console.log(res)},\n      err => console.error(err)\n    );\n  }\n}\n","<p>property-form works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}